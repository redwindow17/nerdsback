#!/usr/bin/env python
"""
Script to generate a .env file with secure values from the current settings.
This is used to transition from hardcoded credentials to environment variables.
"""

import os
import sys
from django.core.management.utils import get_random_secret_key

# Ensure script is run from the correct directory
if not os.path.exists('manage.py'):
    print("Error: This script must be run from the Django project root directory.")
    sys.exit(1)

# Define the current values (same as the fallback values in settings.py)
env_vars = {
    'DJANGO_SECRET_KEY': 'django-insecure-123456789abcdefghijklmnopqrstuvwxyz',
    'DJANGO_DEBUG': 'True',
    'DJANGO_ALLOWED_HOSTS': '',
    
    'EMAIL_HOST': 'smtp.zoho.in',
    'EMAIL_PORT': '587',
    'EMAIL_USE_TLS': 'True',
    'EMAIL_HOST_USER': 'no-reply@nerdslab.in',
    'EMAIL_HOST_PASSWORD': 'dtaK8xf&',
    
    'LAB_SERVICE_URL': 'https://labs.example.com',
    'LAB_SERVICE_TOKEN': 'your-api-token-here',
}

# Path to the .env file
env_file = '.env'

# Check if the .env file already exists
if os.path.exists(env_file):
    should_overwrite = input(f"The file {env_file} already exists. Overwrite? (y/n): ").lower()
    if should_overwrite != 'y':
        print("Operation cancelled.")
        sys.exit(0)

# Generate the .env file content
env_content = "# Django environment variables - KEEP THIS FILE SECURE\n"
env_content += "# Generated by generate_env.py\n\n"

for key, value in env_vars.items():
    env_content += f"{key}={value}\n"

# Write the .env file
with open(env_file, 'w') as f:
    f.write(env_content)

print(f"Generated {env_file} file with current settings.")
print("IMPORTANT: This file contains sensitive information and should not be committed to version control.")
print("            Make sure to add it to your .gitignore file.")

# Update .gitignore to exclude .env file
gitignore_file = '.gitignore'
gitignore_entry = '.env'

# Check if .gitignore exists and if the entry is already there
if os.path.exists(gitignore_file):
    with open(gitignore_file, 'r') as f:
        gitignore_content = f.read()
    
    if gitignore_entry not in gitignore_content:
        with open(gitignore_file, 'a') as f:
            f.write(f"\n# Environment variables\n{gitignore_entry}\n")
            print(f"Added {gitignore_entry} to {gitignore_file}")
else:
    with open(gitignore_file, 'w') as f:
        f.write(f"# Environment variables\n{gitignore_entry}\n")
        print(f"Created {gitignore_file} with {gitignore_entry}")

print("\nNEXT STEPS:")
print("1. For production, generate a new secure SECRET_KEY by running:")
print("   python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'")
print("2. Update EMAIL_HOST_PASSWORD with the actual password if needed.")
print("3. Update LAB_SERVICE_TOKEN with the actual token if needed.")
print("4. Set DJANGO_DEBUG=False for production environments.")
print("5. Set DJANGO_ALLOWED_HOSTS to your domain(s), e.g., example.com,www.example.com") 